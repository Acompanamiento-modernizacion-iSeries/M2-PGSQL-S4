-- POSTGRESS
-- Taller: Vistas para un sistema bancario
-- HAROLD CHOLES MEJIA

--1. SALDO TOTAL DE CADA CLIENTE: Crear una vista que muestre el saldo total de cada cliente en todas sus cuentas.
CREATE VIEW SALDO_TOTAL_CUENTAS AS
SELECT CLIENTES.CLIENTE_ID, NOMBRE, APELLIDO, SUM (SALDO) AS SALDO
	FROM CLIENTES JOIN CUENTAS_BANCARIAS ON CLIENTES.CLIENTE_ID = CUENTAS_BANCARIAS.CLIENTE_ID
GROUP BY CLIENTES.CLIENTE_ID, NOMBRE;

SELECT * FROM SALDO_TOTAL_CUENTAS;


--2. TRANSACCIONES RECIENTES DE CLIENTES: Crear una vista que muestre las transacciones realizadas por los clientes en los últimos 30 días.
CREATE VIEW TRANSACCIONES_CLIENTES AS
SELECT NOMBRE, APELLIDO, TIPO_TRANSACCION, TRANSACCIONES.MONTO_TRANS, TRANSACCIONES.FECHA_TRANSACCION
FROM CLIENTES
	JOIN CUENTAS_BANCARIAS ON CLIENTES.CLIENTE_ID = CUENTAS_BANCARIAS.CLIENTE_ID
	JOIN TRANSACCIONES ON CUENTAS_BANCARIAS.CUENTA_ID = TRANSACCIONES.CUENTA_ID
WHERE FECHA_TRANSACCION >= NOW() - INTERVAL '30 DAYS';
	
SELECT * FROM TRANSACCIONES_CLIENTES;

--3. CLIENTES CON CUENTAS EN MÚLTIPLES SUCURSALES: Crear una vista que muestre los clientes que tienen cuentas en más de una sucursal.
CREATE VIEW CLIENTES_CUENTAS_MULTIPLES_SUCURSALES AS
	SELECT CLIENTES.CLIENTE_ID, CLIENTES.NOMBRE, CLIENTES.APELLIDO, COUNT(*) AS CANTIDAD_SUCURSALES FROM CLIENTES
	JOIN CUENTAS_BANCARIAS ON CUENTAS_BANCARIAS.CLIENTE_ID = CLIENTES.CLIENTE_ID
	JOIN SUCURSALES ON SUCURSALES.SUCURSAL_ID = CUENTAS_BANCARIAS.SUCURSAL_ID
	GROUP BY CLIENTES.CLIENTE_ID, CLIENTES.NOMBRE, CLIENTES.APELLIDO HAVING COUNT(*) > 1;

		
SELECT * FROM CLIENTES_CUENTAS_MULTIPLES_SUCURSALES ;

--4. TRANSACCIONES DE CUENTAS CON SALDO ALTO: Crear una vista que muestre las transacciones de cuentas con saldo mayor a 5000.
CREATE VIEW TRANSACCIONES_SALDO_ALTO_MAYOR_5000 AS
SELECT CUENTAS_BANCARIAS.* FROM CUENTAS_BANCARIAS
	JOIN TRANSACCIONES ON CUENTAS_BANCARIAS.CUENTA_ID = TRANSACCIONES.CUENTA_ID
	WHERE TRANSACCIONES.MONTO_TRANS > '5000'
	ORDER BY NUMERO_CUENTA; 
	
SELECT * FROM TRANSACCIONES_SALDO_ALTO_MAYOR_5000;

--5. PRÉSTAMOS Y TOTAL ADEUDADO POR CLIENTE: Crear una vista que muestre los clientes con préstamos y el total adeudado.
CREATE VIEW PRESTAMOS_Y_TOTALES_POR_CLIENTE AS
SELECT CLIENTES.NOMBRE,CLIENTES.APELLIDO, CUENTAS_BANCARIAS.NUMERO_CUENTA, SALDO AS "SALDO CREDITO", TASA_INTERES, FECHA_INICIO, FECHA_FIN
FROM CLIENTES
JOIN CUENTAS_BANCARIAS ON CLIENTES.CLIENTE_ID = CUENTAS_BANCARIAS.CLIENTE_ID
JOIN PRESTAMOS ON CUENTAS_BANCARIAS.CUENTA_ID = PRESTAMOS.CUENTA_ID

SELECT * FROM PRESTAMOS_Y_TOTALES_POR_CLIENTE ;

--6. CUENTAS CON ALTA ACTIVIDAD RECIENTE: Crear una vista que muestre las cuentas que han realizado más de 3 transacciones en el último mes.
CREATE VIEW TRANSACCIONES_MAYORES_3_REALIZADAS AS
SELECT CUENTAS_BANCARIAS.NUMERO_CUENTA, COUNT(TRANSACCIONES.CUENTA_ID)
FROM CUENTAS_BANCARIAS
JOIN TRANSACCIONES ON CUENTAS_BANCARIAS.CUENTA_ID = TRANSACCIONES.CUENTA_ID
WHERE FECHA_TRANSACCION >= NOW() - INTERVAL '1 MONTH'
GROUP BY CUENTAS_BANCARIAS.NUMERO_CUENTA
HAVING COUNT(TRANSACCIONES.CUENTA_ID) > 3;

SELECT * FROM TRANSACCIONES_MAYORES_3_REALIZADAS;

--7. CLIENTES CON RETIROS ALTOS: Crear una vista que muestre los clientes que han realizado retiros mayores a 1000.
CREATE VIEW CLIENTES_RETIROS_ALTOS AS 
SELECT CLIENTES.NOMBRE, CLIENTES.APELLIDO, SUM(CUENTAS_BANCARIAS.SALDO) --NUMERO_CUENTA, TIPO_TRANSACCION--, 
	FROM CLIENTES
	JOIN CUENTAS_BANCARIAS ON CLIENTES.CLIENTE_ID = CUENTAS_BANCARIAS.CLIENTE_ID
	JOIN TRANSACCIONES ON CUENTAS_BANCARIAS.CUENTA_ID = TRANSACCIONES.CUENTA_ID
	WHERE TIPO_TRANSACCION = 'RETIRO' AND CUENTAS_BANCARIAS.SALDO > '100'
	GROUP BY CLIENTES.NOMBRE,CLIENTES.APELLIDO;

SELECT * FROM CLIENTES_RETIROS_ALTOS ;

--8. CLIENTES Y NÚMERO DE SUCURSALES: Crear una vista que muestre las sucursales y el número de clientes asociados a cada una.
CREATE VIEW SUCURSALES_CLIENTES AS
	SELECT SUCURSALES.SUCURSAL_ID , SUCURSALES.NOMBRE, COUNT(CLIENTES.CLIENTE_ID) AS NUMERO_CLIENTES
	FROM  SUCURSALES
	LEFT JOIN CLIENTES ON SUCURSALES.SUCURSAL_ID = CLIENTES.SUCURSAL_ID
	GROUP BY SUCURSALES.SUCURSAL_ID, SUCURSALES.NOMBRE;
		
SELECT * FROM SUCURSALES_CLIENTES ;

--9. CLIENTES CON MÚLTIPLES TIPOS DE CUENTAS: Crear una vista que muestre los clientes que tienen más de un tipo de cuenta.
CREATE VIEW CLIENTES_MULTIPLES_TIPOS_CUENTAS AS 
	SELECT   CLIENTES.NOMBRE, CLIENTES.APELLIDO, COUNT(CUENTAS_BANCARIAS.CLIENTE_ID)
	FROM CLIENTES
	JOIN CUENTAS_BANCARIAS ON CLIENTES.CLIENTE_ID = CUENTAS_BANCARIAS.CLIENTE_ID
	GROUP BY  CLIENTES.NOMBRE, CLIENTES.APELLIDO
	HAVING COUNT(CUENTAS_BANCARIAS.CLIENTE_ID) > 1;

SELECT * FROM CLIENTES_MULTIPLES_TIPOS_CUENTAS;

--10. PRÉSTAMOS SUPERIORES AL PROMEDIO: Crear una vista que muestre los préstamos que superan el promedio de todos los préstamos.
CREATE VIEW PRESTAMOS_SUPERIORES_AL_PROMEDIO AS 
SELECT CLIENTES.NOMBRE, CLIENTES.APELLIDO, CUENTAS_BANCARIAS.NUMERO_CUENTA, CUENTAS_BANCARIAS.SALDO
	FROM CLIENTES
	JOIN CUENTAS_BANCARIAS ON CLIENTES.CLIENTE_ID = CUENTAS_BANCARIAS.CLIENTE_ID
	JOIN PRESTAMOS ON CUENTAS_BANCARIAS.CUENTA_ID = PRESTAMOS.CUENTA_ID
	WHERE CAST(CUENTAS_BANCARIAS.SALDO AS DECIMAL(19,4)) > (SELECT AVG(MONTO) FROM PRESTAMOS);  --se coloco asi por que el campo saldo es de tipo money y sale error en este where

SELECT * FROM PRESTAMOS_SUPERIORES_AL_PROMEDIO ;
